@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use 'sass:math';
@mixin -private-write-variables($data, $name: null, $parentName: null) {
  @if meta.type-of($data) == map {
    @each $k, $v in $data {
      @if string.slice('#{$k}', 1, 1) != '_' {
        $fullName: $name;
        @if $name and $parentName != $k {
          $fullName: '#{$name}-#{$k}';
        } @else if not $name {
          $fullName: $k;
        }

        @include -private-write-variables($v, $fullName, $k);
      }
    }

    $aliases: map.get($data, '_aliases');
    $alphas: map.get($data, '_alphas');

    @if $aliases {
      @each $k, $v in $aliases {
        --#{$name}-#{$k}: var(--#{$name}-#{$v});
        --#{$name}-contrast-#{$k}: var(--#{$name}-contrast-#{$v});

        @if $alphas {
          @each $a in $alphas {
            $an: 'a#{math.round($a * 100)}';
            --#{$name}-#{$an}-#{$k}: var(--#{$name}-#{$an}-#{$v});
          }
        }
      }
    }
  } @else if meta.type-of($data) != list {
    --#{$name}: #{$data};
  }
}

@mixin -private-write-theme-light($theme, $id, $defaultTheme, $defaultDark, $prefix) {
  $isDefault: $id == $defaultTheme;

  $selector: '';
  @if $isDefault and not $defaultDark {
    $selector: ':root, html:not([theme-mode=dark])[theme=#{$id}], html:not([theme-mode=dark]) [theme=#{$id}]';
  } @else if($isDefault) {
    $selector: 'html[theme-mode=light], html[theme-mode=light][theme=#{$id}], html[theme-mode=light] [theme=#{$id}]';
  } @else if($defaultDark) {
    $selector: 'html[theme-mode=light][theme=#{$id}], html[theme-mode=light] [theme=#{$id}]';
  } @else {
    $selector: 'html:not([theme-mode=dark])[theme=#{$id}], html:not([theme-mode=dark]) [theme=#{$id}]';
  }
  -theme-definition-,
  #{$selector} {
    @include -private-write-variables(
      (
        id: $id,
        mode: 'light',
      ),
      if($prefix == 'theme', 'theme', '#{$prefix}-theme')
    );
    @include -private-write-variables($theme, $prefix);
    color: var(--theme-foreground-text);
    background-color: var(--theme-background);
  }

  @if $defaultDark {
    @media (prefers-color-scheme: light) {
      @if $isDefault {
        $selector: ':root:not(html[theme-mode]), html:not([theme-mode=dark])[theme=#{$id}], html:not([theme-mode=dark]) [theme=#{$id}]';
      } @else {
        $selector: 'html:not([theme-mode=dark])[theme=#{$id}], html:not([theme-mode=dark]) [theme=#{$id}]';
      }
      #{$selector} {
        @include -private-write-variables(
          (
            id: $id,
            mode: 'light',
          ),
          if($prefix == 'theme', 'theme', '#{$prefix}-theme')
        );
        @include -private-write-variables($theme, $prefix);
        color: var(--theme-foreground-text);
        background-color: var(--theme-background);
      }
    }
  }
}

@mixin -private-write-theme-dark($theme, $id, $defaultTheme, $defaultDark, $prefix) {
  $isDefault: $id == $defaultTheme;

  $selector: '';
  @if $isDefault and $defaultDark {
    $selector: ':root, html:not([theme-mode=light])[theme=#{$id}], html:not([theme-mode=light]) [theme=#{$id}]';
  } @else if($isDefault) {
    $selector: 'html[theme-mode=dark], html[theme-mode=dark][theme=#{$id}], html[theme-mode=dark] [theme=#{$id}]';
  } @else if(not $defaultDark) {
    $selector: 'html[theme-mode=dark][theme=#{$id}], html[theme-mode=dark] [theme=#{$id}]';
  } @else {
    $selector: 'html:not([theme-mode=light])[theme=#{$id}], html:not([theme-mode=light]) [theme=#{$id}]';
  }

  -theme-definition-,
  #{$selector} {
    @include -private-write-variables(
      (
        id: $id,
        mode: 'dark',
      ),
      if($prefix == 'theme', 'theme', '#{$prefix}-theme')
    );
    @include -private-write-variables($theme, $prefix);
    color: var(--theme-foreground-text);
    background-color: var(--theme-background);
  }
  @if not $defaultDark {
    @media (prefers-color-scheme: dark) {
      @if $isDefault {
        $selector: ':root:not(html[theme-mode]), html:not([theme-mode=light])[theme=#{$id}], html:not([theme-mode=light]) [theme=#{$id}]';
      } @else {
        $selector: 'html:not([theme-mode=light])[theme=#{$id}], html:not([theme-mode=light]) [theme=#{$id}]';
      }
      #{$selector} {
        @include -private-write-variables(
          (
            id: $id,
            mode: 'dark',
          ),
          if($prefix == 'theme', 'theme', '#{$prefix}-theme')
        );
        @include -private-write-variables($theme, $prefix);
        color: var(--theme-foreground-text);
        background-color: var(--theme-background);
      }
    }
  }
}

@mixin -private-write-theme-shared($theme, $id, $defaultTheme, $defaultDark, $prefix) {
  $isDefault: $id == $defaultTheme;
  $selector: '[theme=#{$id}]';

  @if $isDefault {
    $selector: ':root, #{$selector}';
  }
  -theme-definition-,
  #{$selector} {
    @include -private-write-variables(
      (
        id: $id,
        mode: 'shared',
      ),
      if($prefix == 'theme', 'theme', '#{$prefix}-theme')
    );
    @include -private-write-variables($theme, $prefix);
  }
}

@mixin -private-write-theme($theme, $id, $defaultTheme, $defaultDark, $prefix) {
  @include -private-write-theme-shared(map.get($theme, 'shared'), $id, $defaultTheme, $defaultDark, $prefix);
  @include -private-write-theme-light(map.get($theme, 'light'), $id, $defaultTheme, $defaultDark, $prefix);
  @include -private-write-theme-dark(map.get($theme, 'dark'), $id, $defaultTheme, $defaultDark, $prefix);
}

@mixin styles($themes) {
  $defaultTheme: map.get($themes, 'defaultTheme');
  $defaultDark: map.get($themes, 'defaultDark');
  $prefix: map.get($themes, 'propertyPrefix');
  $registry: map.get($themes, 'registry');

  -theme-prefix- {
    --prefix: #{$prefix};
  }

  @each $key, $theme in $registry {
    @include -private-write-theme($theme, $key, $defaultTheme, $defaultDark, $prefix);
  }
}

@mixin -private-apply-base-theme($darkDefault: false) {
  @if not $-private-base-theme-applied {
    $-private-base-theme-applied: true !global;
    @if $darkDefault {
      html,
      [theme-dark] {
        @include mat.all-component-themes(theme.$theme-dark);
      }
      [theme-light] {
        @include mat.all-component-colors(theme.$theme-light);
      }
    } @else {
      html,
      [theme-light] {
        @include mat.all-component-themes(theme.$theme-light);
      }
      [theme-dark] {
        @include mat.all-component-colors(theme.$theme-dark);
      }
    }
  }
}
