$animation-speed: 0.2s;

:host {
  --scrollbar-size: 0px;
  display: grid;
  position: relative;
  min-height: 100%;
  grid-template-columns: 1fr var(--scroll-container-scrollbar, 0px);
  > * {
    grid-row: 1 / -1;
    grid-column: 1 / -2;
  }
  > [cdkScrollable] {
    grid-column: 1 / -1;
  }

  [cdkScrollable] {
    overflow-y: auto;
    overflow-x: hidden;
    display: block;
    > * {
      min-height: 100%;
    }
  }
}

:host {
  > div[layer-group] {
    &[layer-group="viewport"] {
      z-index: 40;
    }
    &[layer-group="application"] {
      z-index: 30;
    }
  }
  > [cdkScrollable] {
    z-index: 10;
  }
}
:host {
  --viewport-inset: var(--viewport-top-height, 0px)
    var(--viewport-right-width, 0px) var(--viewport-bottom-height, 0px)
    var(--viewport-left-width, 0px);

  --application-inset: calc(
      var(--viewport-top-height, 0px) + var(--application-top-height, 0px)
    )
    calc(var(--viewport-right-width, 0px) + var(--application-right-width, 0px))
    calc(
      var(--viewport-bottom-height, 0px) + var(--application-bottom-height, 0px)
    )
    calc(var(--viewport-left-width, 0px) + var(--application-left-width, 0px));

  > div[layer-group] {
    &[layer-group="viewport"] {
      padding: 0;
    }
    &[layer-group="application"] {
      padding: var(--viewport-inset);
    }
  }

  .viewport-inset {
    inset: var(--viewport-inset);
  }
  .viewport-inset-padding {
    padding: var(--viewport-inset);
  }
  .viewport-inset-margin {
    margin: var(--viewport-inset);
  }

  .application-inset {
    inset: var(--application-inset);
  }
  .application-inset-padding {
    padding: var(--application-inset);
  }
  .application-inset-margin {
    margin: var(--application-inset);
  }
}

//??
:host {
  div[layer-group="application"],
  div[layer-group="scroll"] {
    --area-top-background: var(--background-app-bar);
    --area-left-background: var(--background-app-bar);
    --area-bottom-background: var(--background-app-bar);
    --area-right-background: var(--background-app-bar);
  }
}
//??
:host {
  --scroll-hide-duration: #{$animation-speed};
  .hides-on-scroll {
    &.horizontal {
      &.start {
        transition: margin-top ease-out var(--scroll-hide-duration);
      }
      &.end {
        transition: margin-bottom ease-out var(--scroll-hide-duration);
      }
    }
    &.vertical {
      &.start {
        transition: margin-left ease-out var(--scroll-hide-duration);
      }
      &.end {
        transition: margin-right ease-out var(--scroll-hide-duration);
      }
    }
  }

  &.scroll-hide .hides-on-scroll {
    &.horizontal {
      &.start {
        margin-top: calc(var(--height) * -1);
      }
      &.end {
        margin-bottom: calc(var(--height) * -1);
      }
    }
    &.vertical {
      &.start {
        margin-left: calc(var(--width) * -1);
      }
      &.end {
        margin-right: calc(var(--width) * -1);
      }
    }
  }
}

:host {
  --modal-hide-duration: 0.2s;

  div[modal] {
    flex: 1;
  }

  .modal-base ::ng-deep > [layer="base"],
  .modal {
    transition: filter ease-in var(--modal-hide-duration);
    &::after {
      content: " ";
      pointer-events: none;
      transition: background-color ease-in var(--modal-hide-duration);
      position: absolute;
      inset: 0;
    }
  }

  .modal-base.modal-disable ::ng-deep > [layer="base"],
  .modal-disable:not(.modal-base) {
    pointer-events: none;
  }

  &[modal="3"],
  &[modal="2"],
  &[modal="1"] {
    .modal-base.modal-blur ::ng-deep > [layer="base"],
    .modal-blur:not(.modal-base) {
      filter: blur(1px);
    }

    .modal-base.modal-gray ::ng-deep > [layer="base"],
    .modal-gray:not(.modal-base) {
      filter: grayscale(0.69) brightness(42%);
      &::after {
        background-color: var(--foreground-disabled);
      }
    }

    .modal-base.modal-blur.modal-gray ::ng-deep > [layer="base"],
    .modal-blur.modal-gray:not(.modal-base) {
      filter: blur(1px) grayscale(0.69) brightness(42%);
    }
  }
}
